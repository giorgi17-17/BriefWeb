---
globs: **/contexts/*.jsx,**/contexts/*.js,**/hooks/*.js,**/utils/authHooks.js
---

# Authentication and Context Management

## Supabase Authentication

- **Client**: [supabaseClient.js](mdc:src/utils/supabaseClient.js) - Supabase configuration
- **Auth Context**: [AuthContext.jsx](mdc:src/contexts/AuthContext.jsx) - Main authentication provider
- **Auth Hooks**: [authHooks.js](mdc:src/utils/authHooks.js) - Custom hooks for auth operations

## Context Pattern

Follow the established pattern for creating contexts:

1. **Value File**: `[Name]ContextValue.js` - Exports the context object
2. **Provider File**: `[Name]Context.jsx` - Exports the provider component
3. **Hook**: Custom hook for consuming context (e.g., `useAuth`)

```jsx
// ContextValue.js
import { createContext } from "react";
export const AuthContext = createContext(null);

// Context.jsx
export function AuthProvider({ children }) {
  // State and methods
  const value = { user, loading, signIn, signOut };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

// Usage Hook
export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within AuthProvider");
  }
  return context;
}
```

## Authentication Patterns

- **Protected Routes**: Use `ProtectedRoute` wrapper component for auth-required pages
- **Session Management**: Auto-refresh sessions on app visibility change
- **Error Handling**: Unified error handling with `handleAuthError` pattern
- **User Database**: Automatically sync Supabase auth users with custom users table

## Context Providers Used

- **AuthProvider**: User authentication state
- **ThemeProvider**: Light/dark theme management
- **LanguageProvider**: i18n language state
- **UserPlanProvider**: User subscription/plan management

## State Management Guidelines

- Use React Context for global state that needs to be shared across many components
- Keep context providers as high in the component tree as needed but no higher
- Use custom hooks to encapsulate context consumption logic
- Implement loading states and error handling in context providers
